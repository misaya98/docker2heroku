# 工作流名称
name: Deploy Docker Image to Heroku

# 触发条件：允许手动触发
on:
  workflow_dispatch:
    inputs:
      # 输入参数1：要部署的 Heroku 应用名称 (可选)
      heroku_app_name:
        description: 'The name of the Heroku app (optional)'
        required: false
        type: string
      # 输入参数2：是否创建新应用
      create_new_app:
        description: 'Check this box to create a new Heroku app'
        required: false
        type: boolean
        default: false
      # 输入参数3：要部署的 Docker Hub 镜像名称
      docker_image:
        description: 'The full Docker Hub image name and tag (e.g., your-username/your-image:latest)'
        required: true
        type: string
      # 输入参数4：Heroku 的环境变量配置
      heroku_config_vars:
        description: 'Heroku config variables (one per line, e.g., KEY=VALUE)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码库
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤2：根据用户输入确定 Heroku 应用名称
      - name: Determine Heroku App Name
        id: vars
        run: |
          APP_NAME=""
          # 场景 1 & 2: 用户提供了 app_name
          if [[ -n "${{ github.event.inputs.heroku_app_name }}" ]]; then
            echo "Using provided Heroku app name: ${{ github.event.inputs.heroku_app_name }}"
            APP_NAME="${{ github.event.inputs.heroku_app_name }}"
          # 场景 3: 用户未提供 app_name, 但要求创建新应用
          elif [[ "${{ github.event.inputs.create_new_app }}" == "true" ]]; then
            echo "Heroku app name not provided, deriving from Docker image and adding random suffix..."
            # 使用更可靠的方法提取基础名称：先移除标签，再移除用户/组织前缀
            BASE_NAME=$(echo "${{ github.event.inputs.docker_image }}" | sed 's/:.*//' | sed 's#.*/##')
            RANDOM_SUFFIX=$(openssl rand -hex 3)
            APP_NAME="$BASE_NAME-$RANDOM_SUFFIX"
            echo "Derived and randomized app name: $APP_NAME"
          # 场景 4: 用户未提供 app_name, 且不创建新应用 (无效场景)
          else
            echo "::error::Invalid input. You must provide an 'Heroku app name' if you are not creating a new app."
            exit 1
          fi
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      # 步骤3：登录到 Heroku 容器注册表
      - name: Log in to Heroku Container Registry
        run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      # 步骤4：(可选) 登录到 Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤5：安装 Heroku CLI
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      # 步骤6：(条件执行) 如果用户勾选，则创建新应用并设置堆栈
      - name: Create Heroku App if requested
        if: github.event.inputs.create_new_app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku create ${{ steps.vars.outputs.app_name }} --stack container

      # 步骤7：从 Docker Hub 拉取镜像
      - name: Pull image from Docker Hub
        run: docker pull ${{ github.event.inputs.docker_image }}

      # 步骤8：为镜像重打 Heroku 格式的标签
      - name: Retag Docker image for Heroku
        run: docker tag ${{ github.event.inputs.docker_image }} registry.heroku.com/${{ steps.vars.outputs.app_name }}/web

      # 步骤9：将镜像推送到 Heroku 容器注册表
      - name: Push image to Heroku Container Registry
        run: docker push registry.heroku.com/${{ steps.vars.outputs.app_name }}/web

      # 步骤10：在 Heroku 上发布新镜像
      - name: Release new image on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app ${{ steps.vars.outputs.app_name }}

      # 步骤11：设置 Heroku 环境变量
      - name: Set Heroku config variables
        if: ${{ github.event.inputs.heroku_config_vars != '' }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_CONFIG_VARS: ${{ github.event.inputs.heroku_config_vars }}
        run: |
          echo "$HEROKU_CONFIG_VARS" | xargs heroku config:set --app ${{ steps.vars.outputs.app_name }}
